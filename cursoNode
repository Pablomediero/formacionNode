
1. Refuerzo Temas Previos 

	1.1 Const vs Let vs Var
		* Cualquier variable o constante no tiene valor por defecto devuelve undefined
		Const: Las constantes se utilizan cuando su valor nunca va a cambiar, son variables globales
		Let: Declara variables, recomendado
		Var: Declara una variable, por recomendación no se utiliza ya que permite todo y puede generar errores

	1.2 Templates Literales
		Con ` ` podemos generar una template en la que podremos implementar datos de la siguiente manera ${dato}
		Es muy utilizado al asignar datos en HTML
		
	1.3 Destructuración de Objetos
		Optimizar codigo al interactuar con un objeto
		
		const objeto = { propiedades...}
		
		Forma Normal: 
			const propiedad1 = objeto.propiedad1;
			const propiedad2 = objeto.propiedad2;
			const propiedad3 = objeto.propiedad3;
			
			console.log(propiedad1, propiedad2, propiedad3)
		
		Forma Optimizada
			const { propiedad1, propiedad2, propiedad3 } = objeto
			console.log(propiedad1, propiedad2, propiedad3)
			
	1.4 Funciones de flecha
	Tiene más ventajas que las funciones tradicionales
	
	const sumar = (a + b) => {
		return a + b
	}
	
	1.5 Callbacks
	Es una función que se va ejecutar en un momento posterior y es pasada como argumento en otra función
	
	1.6 Promesas
	Recibe un callback con 2 argumentos para gestionarlo y tener un control
		resolve: Codigo sin errores
		reject: Codigo error
	
	const promesa = new Promise( (resolve, reject) => {
		const empleado = empleados.buscar(id)
		if(empleado === id){
			resolve(empleado)
		}else{
			reject("No existe el empleado");
		}
	});
	
	(OJO CON LAS PIRAMIDES)
	
	1.7 Async - Await
	Su función es manejar promesas, declaramos await a la función que devuelve una promesa, en la función donde lo gestionamos a de ser asíncrona por lo que añadimos async 
	
		<async> function add1(x) {
		 	const a = <await> resolveAfter2Seconds(20);
		 	const b = <await> resolveAfter2Seconds(30);
		 	return x + a + b;
		}

2. Bases de Node
	2.1 Package.json -init -install -uninstall
	-init: Iniciamos con unos primeros datos el package.json 
	-install: instalaremos unos modulos(paquetes necesarios) en el directorio node-modules
	-unistall: desinstalamos modulos
	-update: actualiza las dependencias y muestra si existen conflictos con otras
	
	2.2 Yargs 
	Es un paquete que permite lanzar un comando para acceder a los datos del proyecto y manejarlos facilmente
		
